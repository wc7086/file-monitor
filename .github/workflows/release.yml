name: 🚀 Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

# 添加必要的权限
permissions:
  contents: write
  packages: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 🏗️ 构建多平台二进制文件
  build-binaries:
    name: 🏗️ Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux 目标
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: file_monitor
            asset_name: file_monitor-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: file_monitor
            asset_name: file_monitor-linux-x86_64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: file_monitor
            asset_name: file_monitor-linux-aarch64
          
          # Windows 目标
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: file_monitor.exe
            asset_name: file_monitor-windows-x86_64.exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            artifact_name: file_monitor.exe
            asset_name: file_monitor-windows-aarch64.exe
          
          # macOS 目标
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: file_monitor
            asset_name: file_monitor-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: file_monitor
            asset_name: file_monitor-macos-aarch64

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: 📦 Cache Rust toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup/toolchains
          ~/.rustup/update-hashes
          ~/.rustup/settings.toml
        key: ${{ runner.os }}-rustup-stable-${{ matrix.target }}-v2-${{ hashFiles('rust-toolchain.toml', 'rust-toolchain') }}
        restore-keys: |
          ${{ runner.os }}-rustup-stable-${{ matrix.target }}-v2-
          ${{ runner.os }}-rustup-stable-v2-
          ${{ runner.os }}-rustup-

    - name: 📦 Cache Cargo registry and index
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: 📦 Cache Cargo target directory
      uses: actions/cache@v4
      with:
        path: target/
        key: ${{ runner.os }}-cargo-target-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-cargo-target-release-${{ matrix.target }}-
          ${{ runner.os }}-cargo-target-release-
          ${{ runner.os }}-cargo-target-

    # Linux 特殊依赖
    - name: 🔧 Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          # 安装 ARM64 交叉编译工具链（包含 gcc 和 binutils）
          sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
        fi

    # 为 ARM 目标设置链接器
    - name: 🔗 Configure cross-compilation
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      shell: bash
      run: |
        echo "配置 ARM64 交叉编译..."
        mkdir -p ~/.cargo
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
        echo "配置文件内容:"
        cat ~/.cargo/config.toml
        echo "验证工具链:"
        which aarch64-linux-gnu-gcc || echo "⚠️ ARM64 编译器未找到"
        aarch64-linux-gnu-gcc --version || echo "⚠️ ARM64 编译器版本检查失败"

    # 为 musl 目标设置配置
    - name: 🔗 Configure musl target
      if: matrix.target == 'x86_64-unknown-linux-musl'
      shell: bash
      run: |
        echo "配置 musl 静态链接..."
        mkdir -p ~/.cargo
        echo '[target.x86_64-unknown-linux-musl]' >> ~/.cargo/config.toml
        echo 'rustflags = ["-C", "target-feature=+crt-static"]' >> ~/.cargo/config.toml
        echo "配置文件内容:"
        cat ~/.cargo/config.toml

    # 清理和准备 Rust 目标
    - name: 🧹 Prepare Rust target
      shell: bash
      run: |
        echo "准备 Rust 目标: ${{ matrix.target }}"
        
        # 检查当前状态
        echo "当前已安装的目标:"
        rustup target list --installed
        
        # 如果目标已存在但可能损坏，先移除
        if rustup target list --installed | grep -q "${{ matrix.target }}"; then
          echo "目标已存在，检查是否需要重新安装..."
          # 尝试简单验证，如果失败则重新安装
          if ! rustc --print target-list | grep -q "${{ matrix.target }}"; then
            echo "目标验证失败，重新安装..."
            rustup target remove ${{ matrix.target }} 2>/dev/null || true
          else
            echo "目标验证成功，跳过安装"
            exit 0
          fi
        fi
        
        # 安装目标
        echo "安装目标: ${{ matrix.target }}"
        MAX_RETRIES=3
        for i in $(seq 1 $MAX_RETRIES); do
          echo "尝试 $i/$MAX_RETRIES ..."
          if rustup target add ${{ matrix.target }}; then
            echo "✅ 目标安装成功"
            break
          else
            if [ $i -eq $MAX_RETRIES ]; then
              echo "❌ 目标安装失败，已达到最大重试次数"
              exit 1
            fi
            echo "⚠️ 安装失败，清理后重试..."
            # 清理可能的冲突文件
            rustup component remove rust-std-${{ matrix.target }} 2>/dev/null || true
            sleep 2
          fi
        done

    - name: 🔨 Build release binary
      shell: bash
      run: |
        echo "开始构建目标: ${{ matrix.target }}"
        echo "Rust 版本:"
        rustc --version
        echo "Cargo 版本:"
        cargo --version
        echo "已安装的目标:"
        rustup target list --installed
        echo ""
        
        # 验证目标可用
        echo "验证目标: ${{ matrix.target }}"
        if ! rustup target list --installed | grep -q "${{ matrix.target }}"; then
          echo "❌ 目标未安装"
          exit 1
        fi
        
        # 开始构建
        echo "执行构建命令: cargo build --release --target ${{ matrix.target }} --verbose"
        if ! cargo build --release --target ${{ matrix.target }} --verbose; then
          echo "❌ 构建失败，尝试清理并重试..."
          cargo clean
          cargo build --release --target ${{ matrix.target }} --verbose
        fi

    - name: 📦 Prepare binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Windows 不需要 strip
          cp ${{ matrix.artifact_name }} ${{ matrix.asset_name }}
        else
          cp ${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          
          # 根据目标架构选择正确的 strip 工具
          case "${{ matrix.target }}" in
            "aarch64-unknown-linux-gnu")
              # ARM64 Linux 使用交叉编译工具链的 strip
              if command -v aarch64-linux-gnu-strip &> /dev/null; then
                aarch64-linux-gnu-strip ${{ matrix.asset_name }}
              else
                echo "⚠️ aarch64-linux-gnu-strip not found, skipping strip for ARM64"
              fi
              ;;
            "x86_64-unknown-linux-musl")
              # musl 目标可能需要特殊处理，但通常系统 strip 可以工作
              strip ${{ matrix.asset_name }} || echo "⚠️ strip failed for musl target, continuing..."
              ;;
            *)
              # 其他 Linux 目标使用系统 strip
              strip ${{ matrix.asset_name }}
              ;;
          esac
        fi

    - name: 📤 Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.asset_name }}
        retention-days: 1

    - name: 🔍 Debug build output
      if: always()
      shell: bash
      run: |
        echo "=== 构建调试信息 ==="
        echo "目标: ${{ matrix.target }}"
        echo "构建目录内容:"
        ls -la target/${{ matrix.target }}/release/ || echo "构建目录不存在"
        echo "查找二进制文件:"
        find target/${{ matrix.target }}/release/ -name "${{ matrix.artifact_name }}" -o -name "${{ matrix.asset_name }}" 2>/dev/null || echo "未找到预期文件"
        echo "所有文件列表:"
        find target/${{ matrix.target }}/release/ -type f 2>/dev/null || echo "无文件"
        echo "==================="

  # 📦 创建发布包
  create-release-assets:
    name: 📦 Create Release Assets
    runs-on: ubuntu-latest
    needs: build-binaries
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: 📁 Create release directory
      run: mkdir -p release

    - name: 🎁 Package binaries
      shell: bash
      run: |
        echo "=== 调试信息 ==="
        echo "当前目录: $(pwd)"
        echo "artifacts 目录内容:"
        ls -la artifacts/
        echo ""
        echo "各个平台构件详情:"
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            echo "📁 $(basename "$dir"):"
            ls -la "$dir"
            echo "文件类型检查:"
            find "$dir" -type f -exec file {} \;
            echo "---"
          fi
        done
        echo "==============="
        
        cd artifacts
        for dir in */; do
          if [ -d "$dir" ]; then
            binary_name=$(basename "$dir")
            echo "处理目录: $binary_name"
            echo "目录内容:"
            ls -la "$dir"
            
            # 查找二进制文件（改进匹配逻辑）
            binary_file=""
            
            # 首先尝试按照文件名匹配
            if [[ "$binary_name" == *"windows"* ]]; then
              # Windows 平台查找 .exe 文件
              binary_file=$(find "$dir" -name "*.exe" -type f | head -1)
            else
              # Linux/macOS 平台查找特定名称的文件
              # 先尝试精确匹配
              if [[ -f "$dir/$binary_name" ]]; then
                binary_file="$dir/$binary_name"
              elif [[ -f "$dir/file_monitor" ]]; then
                binary_file="$dir/file_monitor"
              else
                # 查找所有文件，排除已知的非二进制文件
                binary_file=$(find "$dir" -type f ! -name "*.txt" ! -name "*.md" ! -name "*.toml" ! -name "*.json" | head -1)
              fi
            fi
            
            echo "检测到的二进制文件: $binary_file"
            
            if [[ -f "$binary_file" ]]; then
              echo "📦 打包 $binary_name (文件: $binary_file)"
              
              # 创建包目录
              package_dir="../release/${binary_name}"
              mkdir -p "$package_dir"
              
              # 复制二进制文件，保持可执行权限
              cp "$binary_file" "$package_dir/"
              chmod +x "$package_dir"/*
              
              # 添加文档文件
              if [ -f "../README.md" ]; then
                cp ../README.md "$package_dir/"
              else
                echo "# File Monitor" > "$package_dir/README.md"
              fi
              
              if ls ../LICENSE* >/dev/null 2>&1; then
                cp ../LICENSE* "$package_dir/"
              else
                echo "MIT License" > "$package_dir/LICENSE"
              fi
              
              # 创建示例配置文件
              cat > "$package_dir/config.example.toml" << 'EOF'
        # 文件监控配置示例
        [monitor]
        # 监控的根目录路径
        root_path = "/path/to/monitor"
        # 检查新文件的时间范围（小时）
        check_hours = 3
        # 扫描间隔（秒）
        scan_interval = 60
        # 并行模式（sync/async/parallel）
        parallel_mode = "sync"
        
        [output]
        # 有新文件时的提示信息
        recording_message = "正在录制"
        # 没有新文件时的提示信息
        not_recording_message = "未录制"
        EOF
              
              # 创建压缩包
              cd "../release"
              if [[ "$binary_name" == *"windows"* ]]; then
                echo "创建 ZIP 压缩包: ${binary_name}.zip"
                zip -r "${binary_name}.zip" "${binary_name}/"
              else
                echo "创建 TAR.GZ 压缩包: ${binary_name}.tar.gz"
                tar -czf "${binary_name}.tar.gz" "${binary_name}/"
              fi
              cd "../artifacts"
            else
              echo "⚠️ 在目录 $binary_name 中找不到可执行文件"
              echo "目录内容详情:"
              find "$dir" -type f -ls
            fi
          fi
        done
        
        echo "=== 最终 release 目录内容 ==="
        ls -la ../release/
        echo "=========================="

    - name: 📊 Generate checksums
      shell: bash
      run: |
        cd release
        echo "生成校验和文件..."
        ls -la
        
        # 只为存在的文件生成校验和
        if ls *.tar.gz >/dev/null 2>&1 || ls *.zip >/dev/null 2>&1; then
          sha256sum *.tar.gz *.zip > checksums.txt 2>/dev/null || {
            # 如果上面失败，分别处理不同类型的文件
            (ls *.tar.gz >/dev/null 2>&1 && sha256sum *.tar.gz > checksums.txt) || true
            (ls *.zip >/dev/null 2>&1 && sha256sum *.zip >> checksums.txt) || true
          }
          echo "校验和文件内容:"
          cat checksums.txt
        else
          echo "⚠️ 没有找到压缩包文件"
          echo "当前目录内容:"
          ls -la
          # 创建空的 checksums 文件以避免后续步骤失败
          touch checksums.txt
        fi

    - name: 📤 Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: release/
        retention-days: 30

  # 🚀 发布到 GitHub Release
  github-release:
    name: 🚀 GitHub Release
    runs-on: ubuntu-latest
    needs: create-release-assets
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download release packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: release

    - name: 🔍 Debug release files
      shell: bash
      run: |
        echo "=== Release 目录调试信息 ==="
        echo "当前目录: $(pwd)"
        echo "Release 目录内容:"
        ls -la release/
        echo "查找压缩包文件:"
        find release/ -name "*.tar.gz" -o -name "*.zip" | head -20
        echo "文件权限检查:"
        find release/ -type f -ls | head -20
        echo "=========================="

    - name: 📝 Extract version from tag
      id: version
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: 📄 Generate release notes
      id: release_notes
      shell: bash
      run: |
        cat > release_notes.md << 'EOF'
        ## 🎉 File Monitor ${{ steps.version.outputs.version }}
        
        ### ✨ 功能特性
        - 🔍 多目录文件监控
        - ⚡ 三种并行模式（sync/async/parallel）
        - 🌐 跨平台支持（Windows/Linux/macOS）
        - 📊 性能优化和网络文件系统支持
        - 🔧 灵活的配置选项
        
        ### 📦 支持平台
        - **Linux**: x86_64, aarch64 (GNU/musl)
        - **Windows**: x86_64, aarch64
        - **macOS**: x86_64 (Intel), aarch64 (Apple Silicon)
        
        ### 🚀 快速开始
        1. 下载对应平台的二进制文件
        2. 解压到目标目录
        3. 运行 `./file_monitor --help` 查看使用方法
        
        ### 📋 使用示例
        ```bash
        # 交互式配置
        ./file_monitor
        
        # 非交互式模式
        ./file_monitor --non-interactive --monitor-path /path/to/monitor
        
        # 运行一次检查
        ./file_monitor --once
        ```
        
        ### 🔧 配置文件
        程序首次运行时会自动创建 `config.toml` 配置文件，可自定义监控参数。
        
        ---
        **完整更新日志**: [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
        EOF

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "File Monitor ${{ steps.version.outputs.version }}"
        body_path: release_notes.md
        files: |
          release/*.tar.gz
          release/*.zip
          release/checksums.txt
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 📦 发布到 Crates.io (可选)
  crates-io-release:
    name: 📦 Publish to Crates.io
    runs-on: ubuntu-latest
    needs: build-binaries
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: 📦 Cache Cargo registry and index
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ubuntu-latest-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-registry-

    - name: 📦 Cache Cargo target directory
      uses: actions/cache@v4
      with:
        path: target/
        key: ubuntu-latest-cargo-target-publish-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
        restore-keys: |
          ubuntu-latest-cargo-target-publish-${{ hashFiles('**/Cargo.lock') }}-
          ubuntu-latest-cargo-target-publish-
          ubuntu-latest-cargo-target-

    - name: 🔍 Verify package
      run: cargo package --verbose

    - name: 📤 Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
      continue-on-error: true  # 允许失败，因为可能已经发布过

  # 🐳 Docker 镜像构建 (可选)
  docker-release:
    name: 🐳 Docker Release
    runs-on: ubuntu-latest
    needs: build-binaries
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: file_monitor-linux-x86_64-musl
        path: ./

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: 📝 Create Dockerfile
      shell: bash
      run: |
        cat > Dockerfile << 'EOF'
        FROM alpine:latest
        RUN apk --no-cache add ca-certificates
        WORKDIR /app
        COPY file_monitor-linux-x86_64-musl /app/file_monitor
        RUN chmod +x /app/file_monitor
        ENTRYPOINT ["/app/file_monitor"]
        EOF

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
      continue-on-error: true 