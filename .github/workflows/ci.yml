name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 🧪 基础测试和代码质量检查
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # 减少 nightly 版本的测试矩阵
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
    
    - name: 🔍 Check code formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check
    
    - name: 📝 Run Clippy lints
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: 🔨 Build project
      run: cargo build --verbose --all-features
    
    - name: 🧪 Run unit tests
      run: cargo test --verbose --all-features
    
    - name: 📚 Test documentation
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo doc --no-deps --all-features

  # 🏗️ 集成测试
  integration-tests:
    name: 🏗️ Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
    
    - name: 🔨 Build release version
      run: cargo build --release
    
    - name: 🧪 Run integration tests
      run: cargo test --test integration_tests --release -- --test-threads=1
    
    - name: 🎯 Test CLI functionality
      shell: bash
      run: |
        # 创建测试目录结构
        mkdir -p test_cli/{a,b,c}
        echo "test file" > test_cli/a/test.txt
        echo "test file" > test_cli/b/test.txt
        
        # 测试非交互模式
        cargo run --release -- --non-interactive --monitor-path test_cli --once
        
        # 测试配置文件创建
        if [ ! -f config.toml ]; then
          echo "❌ 配置文件未创建"
          exit 1
        fi
        
        echo "✅ CLI 功能测试通过"
    
    - name: 🏃‍♂️ Test parallel modes
      shell: bash
      run: |
        # 创建大量测试文件
        mkdir -p stress_test
        for i in {1..100}; do
          mkdir -p "stress_test/dir_$i"
          for j in {1..10}; do
            echo "content $i-$j" > "stress_test/dir_$i/file_$j.txt"
          done
        done
        
        # 测试不同并行模式
        for mode in sync async parallel; do
          echo "测试模式: $mode"
          cargo run --release -- \
            --non-interactive \
            --monitor-path stress_test \
            --once
        done
        
        echo "✅ 并行模式测试通过"

  # 🚀 性能基准测试
  performance-tests:
    name: 🚀 Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          target/
        key: ${{ runner.os }}-cargo-perf-${{ hashFiles('**/Cargo.lock') }}
    
    - name: 🔨 Build optimized release
      run: cargo build --release
    
    - name: ⚡ Run performance benchmarks
      run: |
        chmod +x scripts/performance_test.sh
        ./scripts/performance_test.sh
    
    - name: 📊 Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance_results.txt
        retention-days: 30

  # 🛡️ 安全性扫描
  security-audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: 🔍 Install cargo-audit
      run: cargo install cargo-audit
    
    - name: 🛡️ Run security audit
      run: cargo audit
    
    - name: 🔐 Run cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1

  # 🌐 跨平台兼容性测试
  cross-platform:
    name: 🌐 Cross Platform Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: 🔨 Build for target
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: 🧪 Test for target (if native)
      if: |
        (matrix.target == 'x86_64-unknown-linux-gnu' && matrix.os == 'ubuntu-latest') ||
        (matrix.target == 'x86_64-pc-windows-msvc' && matrix.os == 'windows-latest') ||
        (matrix.target == 'x86_64-apple-darwin' && matrix.os == 'macos-latest')
      run: cargo test --release --target ${{ matrix.target }}

  # 📝 代码覆盖率
  coverage:
    name: 📝 Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🦀 Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: 📦 Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: 📊 Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: 📤 Upload to codecov.io
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false

  # ✅ 总体状态检查
  ci-success:
    name: ✅ CI Success
    if: always()
    runs-on: ubuntu-latest
    needs:
      - test
      - integration-tests
      - security-audit
      - cross-platform
    
    steps:
    - name: ✅ Check all jobs
      if: |
        needs.test.result != 'success' ||
        needs.integration-tests.result != 'success' ||
        needs.security-audit.result != 'success' ||
        needs.cross-platform.result != 'success'
      run: |
        echo "❌ 一个或多个 CI 作业失败"
        exit 1
    
    - name: 🎉 All checks passed
      run: echo "🎉 所有检查通过！" 